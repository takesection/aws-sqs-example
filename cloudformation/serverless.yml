service: aws-sqs-example

provider:
  name: aws
  role: LambdaRole

package:
  artifact: "../sender-app/target/scala-2.12/sender-app-assembly-0.1.0-SNAPSHOT.jar"

functions:
  highPriority:
    handler: "jp.pigumer.example.Handler::handleRequest"
    events:
      - http:
          path: high-priority
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    runtime: java8
    environment:
      QUEUE:
        "Fn::GetAtt":
          - HighPriorityQueue
          - QueueName
  normalPriority:
    handler: "jp.pigumer.example.Handler::handleRequest"
    events:
      - http:
          path: normal-priority
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    runtime: java8
    environment:
      QUEUE:
        "Fn::GetAtt":
          - NormalPriorityQueue
          - QueueName

resources:
  Resources:
    HighPriorityQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 'HighPriority'
    NormalPriorityQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 'NormalPriority'
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.Authorization
        Name: Cognite
        ProviderARNs:
          - Fn::GetAtt:
              - UserPool
              - Arn
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: aws-sqs-example-lambda-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        Policies:
          - PolicyName: AWSLambdaSQSWrite
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sqs:*"
                  Resource:
                    - "*"
